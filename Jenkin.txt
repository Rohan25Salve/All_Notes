 *What is Jenkins?
Jenkins is an open-source automation server used for Continuous Integration/Continuous Delivery (CI/CD). 
It helps automate the build, testing, and deployment process.
Example: Jenkins can trigger automatic builds when new code is pushed to a Git repository.


Explain the architecture of Jenkins.
Jenkins follows a master-slave(node or Agent) architecture 
where the master controls the build process, 
and slaves execute jobs on different environments.

What is CI and CD
CI - Dev deploy the code on Repository , then jenkin build the Project then later test 
CD - Deploy the Project

o Build
o Test
o Deploy

 
 
 * Jenkinsfile is a text ---->
 A Jenkinsfile is a text file that contains the pipeline code.
A Jenkinsfile is a text file that contains the definition of a Jenkins pipeline. 
It is written in Groovy-based domain-specific language (DSL) and is used to automate the steps of building,
 testing, and deploying applications as part of a CI/CD pipeline.
 
 * architecture of Jenkins.
Jenkins follows a master-slave architecture where the master controls the build process, and slaves execute jobs on different environments.
 
 
 pipeline {
    agent any // Specifies the agent to run the pipeline
stages {
        stage('Build') {
            steps {
                echo 'Building the application...'
                sh 'mvn clean package' // Example build step
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                sh 'mvn test' // Example test step
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
                sh './deploy.sh' // Example deployment step
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

-----------*******------------
How do you trigger Jenkins jobs automatically?

a.Using webhooks from a version control system like GitHub.
b.Poll SCM or use triggers like cron syntax.
c.Upstream/downstream jobs in Jenkins.

------***********--------
How do you handle parallel testing in Jenkins pipelines?

Use the parallel directive in declarative pipelines:
groovy
Copy code
stage('Parallel Testing') {
    parallel {
        stage('Test1') {
            steps {
                sh 'mvn test -Dtest=Test1'
            }
        }
        stage('Test2') {
            steps {
                sh 'mvn test -Dtest=Test2'
            }
        }
    }
}

* Explain the different types of Jenkins jobs.
 Freestyle, Pipeline, Multibranch Pipeline, and Maven jobs.
 Example: A Maven job builds a project using the Maven tool.

* How do you troubleshoot Jenkins build failures?
 Check the console output, logs, and error messages for build failures.
 Example: A failed build due to missing dependencies would show in logs.

* How do you perform load balancing in Jenkins?
 Set up multiple agents(Node) and distribute jobs across them for balanced workloads.

* How do you troubleshoot Jenkins build failures?
 Check the console output, logs, and error messages for build failures.


    **************************         How to Re-run failed test Cases   **************************
	
	TestNG --->>
	1.Use the testng-failed.xml file, automatically generated by TestNG, to re-run failed tests
	2.mvn test -DsuiteXmlFile=test-output/testng-failed.xml
	3.Add a retry logic in your test listener

	
	Junit with cucmber --->>
	1.@CucumberOptions(
    plugin = {"pretty", "html:target/cucumber-html-report",
              "rerun:target/rerun.txt"},
    features = "src/test/resources/features"
                                                )
												
      mvn test -Dcucumber.options=@target/rerun.txt


	  
   2.Implement a custom Retry rule
 public class RetryRule implements TestRule {
    private int retryCount;
    public RetryRule(int retryCount) {
        this.retryCount = retryCount;
    }
    @Override
    public Statement apply(Statement base, Description description) {
        return new RetryStatement(base, retryCount);
    }
	
	
	Jenkins  : 
	Stage 1: Run the full suite of tests.
    Stage 2: Re-run failed tests based on the generated rerun configuration (testng-failed.xml or rerun.txt).
	
	Groovy-based :        tage('Re-run Failed Tests') {
                                                      when {
                                                      fileExists('test-output/testng-failed.xml')
                                                         }
                                                      steps {
                                                      sh 'mvn test -DsuiteXmlFile=test-output/testng-failed.xml'
                                                         }
                                                        }
                                                      }   
	Directly Use in Pipeline->
                                       	retry(2) {
                                           sh 'mvn test'
                                                 }


* How do you back up Jenkins?
Answer:
Back up the $JENKINS_HOME directory, including job configurations, plugins, and build history.

* What are common Jenkinsfile errors and how do you troubleshoot them?
Answer:
Syntax errors: Validate the Jenkinsfile using the Pipeline Syntax Validator.
Plugin compatibility issues: Ensure all required plugins are installed and updated.
Permission issues: Verify workspace and repository access permissions.
	
Setup-part Jenkins -->
Go to "New Item" > Choose "Freestyle Project" or "Pipeline."
Configure the job by specifying:
Source Code Management (e.g., Git repository).
Build triggers (e.g., GitHub webhook, schedule).
Build steps (e.g., shell scripts, Maven commands).
	
	
	

************   What is the Splunk Plugin for Jenkins ?  ****************************
The Splunk Plugin for Jenkins is a tool that integrates Jenkins with Splunk, a powerful platform for searching, monitoring, 
and analyzing machine-generated data. This plugin allows you to send Jenkins build and job-related data (such as logs, metrics, and events) 
to Splunk for centralized logging, monitoring, and analysis.
