****************    What is Appium? **************
Appium is an open-source tool for automating mobile applications
Native -> Andriod app only
Hybrid -> Andriod app with mobile web page application
Mobile application -> Mobile web page application 

on Android, iOS, and Windows platforms. 
It uses the WebDriver protocol for communication between client libraries and the server. 
Cross-platform support: Works on Android and iOS.
Supports multiple languages via WebDriver.

****************  What are the Appium drivers for mobile testing? **************** 

UIAutomator2 (for Android 5.0 and above).
Espresso (for Android UI testing, mainly used for white-box testing).
XCUITest (for iOS automation).
Windows Driver (for Windows desktop applications).

******* What are the main limitations of Appium? ********
No support for image-based testing directly.
Requires setting up emulators or real devices for testing.

****************  Local path System my Computer **********************

C:\Users\admin\AppData\Local\Android\Sdk

____ How to install app on Application on Andriod Studio ____________

go to this path C:\Users\admin\AppData\Local\Android\Sdk
open Commond line 
use this commond --> adb install path_of_file_\app_name.apk



********** Explain Appium architecture.  *************

Appium has 3 layers:
Client (Test script) → written in Java/Python/JS.
Appium Server → acts as a middle layer (Node.js).
Automation Engines →
Android → UIAutomator2 / Espresso.
iOS → XCUITest.

******* What is the difference between appActivity and appPackage? **********
appPackage → Unique identifier of Android app (e.g., com.whatsapp).
appActivity → Entry activity (e.g., .MainActivity).  

******** perform gestures (tap, swipe, drag-drop)   *****************
Use TouchAction / W3C actions.
TouchAction action = new TouchAction(driver);
action.press(PointOption.point(200,500))
      .waitAction(WaitOptions.waitOptions(Duration.ofSeconds(1)))
      .moveTo(PointOption.point(200,100))
      .release()
      .perform();


******** What is the difference between Appium and Espresso/XCUITest?  ***********
Appium = cross-platform, slower, black-box.
Espresso/XCUITest = faster, platform-specific, white-box (access to app internals).


************* handle hybrid app testing in Appium?  *******
Switch between NATIVE_APP and WEBVIEW contexts.
Set<String> contexts = driver.getContextHandles();
for(String context : contexts){
   System.out.println(context);
}
driver.context("WEBVIEW_com.example.app");



********  What common issues do you face with Appium?  *********

NoSuchElementException → locator issue.
Session not created → wrong desired capabilities.
Timeout → device/emulator not responding.
Appium server crash → restart required.


********** locators does Appium support? ***********
id
className
xpath
accessibilityId (for accessibility labels)
AndroidUIAutomator / iOS Predicate


     ***************   Appium Inspector **********************

Allows inspecting the application UI and identifying elements.
UIAutomatorViewer (Android): A standalone tool for inspecting Android apps.
Xcode Accessibility Inspector (iOS): For identifying UI elements in iOS apps.


// Use X-path , id, name ,tagname ,linktext, partial linktext, css selector ,classname
accessibility - > Specific to mobile apps; driver.findElement(MobileBy.AccessibilityId("loginButton")) , driver.findElement(AppiumBy.accessibilityId("Preference")).click();
andriodUIAutomtore -> Android-specific locator to find elements  driver.findElement(MobileBy.AndroidUIAutomator("text(\"Sign In\")"))

iOS Class Chain (iOS) -> iOS-specific locator for targeting elements , driver.findElement(MobileBy.iOSClassChain("**/XCUIElementTypeButton[label == 'OK']"))
iOS Predicate String (iOS) -> Uses NSPredicate expressions to find iOS elements. , driver.findElement(MobileBy.iOSNsPredicateString("value == 'username'"))


   ***************************   test hybrid apps using Appium? **************************
    # switch between Native and WebView contexts
	# Use getContextHandles() to list available contexts and context() to switch.
	
	           How can you handle WebView testing in Appium?
                       Answer:
                       Switch to the WebView context using:
                       
                       Set<String> contextNames = driver.getContextHandles();
                       driver.context("WEBVIEW_com.example.app");
                       Use standard Selenium methods to interact with WebView elements.
                       
Json Representation -->

deviceName - can get using command   adb devices
platformName - can get using command   appium driver list
platformVersion -  can get using command   adb shell getprop ro.build.version.release
If you have multiple devices connected first get the device id using adb devices then run command
adb -s DEVICE_ID shell getprop ro.build.version.release

{
  "appium:automationName": "UiAutomator2",
  "appium:platformName": "Android",
  "appium:platformVersion": "14",
  "appium:deviceName": "emulator-5554",
  "appium:app":"/Users/admin/Downloads/APKFilestt/resources/ApiDemos-debug.apk"
}



 **  Strat Server ---> 
  Use Commond --> Start appium appium --allow-cors 
  
  
  
 **  Android Studio --> 
  Here We Start Our Mobile Application 
  
  // AndroidDriver 
  // Appium-code --> Appium Server --> Mobile Application (Flow of how to run the application)
  
  
  
  
  
  
  ************    Action perform on mobile Application ***********************
  
  
  a) Long Press --->
  b) Drag and Drop  --->
  c) Scrolling swiping pincth
 
 
 
 ************* IOS X-path find *****************************
 
 
 
 
    ************       How do you handle gestures in Appium?  *************

Appium supports gestures like swipe, scroll, pinch, and tap using the TouchAction class in Java.

                          TouchAction action = new TouchAction(driver);
                          action.press(PointOption.point(100, 500))
                                .waitAction(WaitOptions.waitOptions(Duration.ofSeconds(1)))
                                .moveTo(PointOption.point(100, 200))
                                .release()
                                .perform();



******** Appium 1.x and 2.x?   ************

Appium 2.x → modular driver architecture.
Install drivers separately (appium driver install uiautomator2).
Fully W3C WebDriver protocol.
More plugins (images, gestures).


*********  How do you test push notifications in Appium?   ************
Not directly possible (black-box).
Workarounds:
Use ADB commands (Android) → adb shell am broadcast.
Simulate via Firebase / APNS mocks.
Validate app state after notification click.


. How do you handle biometric authentication (Face ID / Fingerprint)?
Use platform simulators:
Android → adb -e emu finger touch 1.
iOS → Xcode simulator API.
Mock biometric API in test env.
